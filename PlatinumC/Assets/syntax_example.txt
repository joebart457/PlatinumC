library kernel32 'kernel32.dll'

import kernel32 stdcall ptr GetStdHandle(int identifier);
import kernel32 stdcall void WriteFile(ptr hConsole, string msg, int sizeOfMessage, int bytesWritten, int reserved);
import kernel32 stdcall void ExitProcess(int exitCode);

library msvcrt 'msvcrt.dll'
import msvcrt cdecl void printf(string msg);
import msvcrt cdecl void printf_num(string msg, int num) from 'printf';
import msvcrt cdecl void printf_float(string msg, float num1, int num) from 'printf';
import msvcrt cdecl void* malloc(int bytes);


global int TestGlobal = 0;

type MyType
{
	int x;
	float y;
	byte testByte;
	struct MyType* selfReferrentialPtr;
	int* intPtr;
}

void Main(){
	ptr hConsole = GetStdHandle(-11);
	WriteFile(hConsole, "Hello, world!", 12, 0, 0);
	int w = 9;
	struct MyType myTLocal;
	printf_num("structs work %d", myTLocal.x);
	myTLocal.x = 9;
	printf_num("structs work %d", myTLocal.x);
	int x = 5;
	if (x - 5 == 0){
		WriteFile(hConsole, "This should print", 17, 0, 0);
	}else {
		WriteFile(hConsole, "This should not print", 21, 0, 0);
		w = 10;
	}
	int* y = &x;
	*y = 98;
	printf_num("\nx is %d (should be 98)", *y);
	TestGlobal = *y;
	printf_num("global is %d (should be 98)", x);
	
	int counter = 0;
	while(counter < 5){
		SayHi();
		counter = AddOne(counter);
	}

	byte b = 1b;
	if ((b & 3b) == 1b){
		printf_num("bytes work %d times", 1);
	}


	float fX = 1.01f;
	float fY = fX + 9.01f;


	if (fY >= 10.02f){
		printf_float("float's work and value was %f", fY, 0);
	}

	struct MyType* myT = (struct MyType*)malloc(17);
	AssignXViaParent(myT);
	printf_num("structs work %d", myT->x);
	(*myT).x = 9;
	printf_num("structs work %d", myT->x);





	ExitProcess(0);

}

void SayHi(){
	printf("Hi");
	return;
}

int AddOne(int number){
	return number + 1;
}

void AssignXViaParent(struct MyType* myType){
	if (myType != 0){
		myType->x = 37;
	}
}